vector<edge>G[155555];
int root = 0;
int parent[18][114514];
int depth[114514];
int dist[114514];

void dis(int now) {
	rep(i, G[now].size()) {
		int e = G[now][i].to;
		if (dist[e] != inf)continue;
		dist[e] = dist[now] + G[now][i].cost;
		dis(e);
	}
}

void dfs(int v, int p, int d) {
	parent[0][v] = p;
	depth[v] = d;
	rep(i, G[v].size()) {
		if (G[v][i].to != p)dfs(G[v][i].to, v, d + 1);
	}
}

void init(int V) {
	dfs(root, -1, 0);
	rep(k, 18) {
		rep(v, V) {
			if (parent[k][v] < 0)parent[k + 1][v] = -1;
			else parent[k + 1][v] = parent[k][parent[k][v]];
		}
	}
}

int lca(int u, int v) {
	if (depth[u] > depth[v])swap(u, v);
	rep(k, 18) {
		if ((depth[v] - depth[u]) >> k & 1) {
			v = parent[k][v];
		}
	}
		if (u == v)return u;
		for (int k = 18; k >= 0; k--) {
			if (parent[k][u] != parent[k][v]) {
				u = parent[k][u];
				v = parent[k][v];
			}
		}
		return parent[0][u];
}
